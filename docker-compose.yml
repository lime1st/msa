version: '3.8'

services:

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\").ok' --quiet"]
      interval: 5s
      timeout: 2s
      retries: 60
    volumes:
      - mongodb_data:/data/db
    networks:
      - microservices-network

  mysql:
    image: mysql:latest
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uuser", "-ppassword"]
      interval: 5s
      timeout: 2s
      retries: 60
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 2s
      retries: 60
    networks:
      - microservices-network

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    environment:
      - RABBIT_ADDRESSES=rabbitmq
      - STORAGE_TYPE=mem
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network

  product:
    build:
      context: microservices/product
      dockerfile: Dockerfile
    image: msa/product:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - CONFIG_SERVER_URI=http://config:8888
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

  recommendation:
    build:
      context: microservices/recommendation
      dockerfile: Dockerfile
    image: msa/recommendation:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - CONFIG_SERVER_URI=http://config:8888
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

  review:
    build:
      context: microservices/review
      dockerfile: Dockerfile
    image: msa/review:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - CONFIG_SERVER_URI=http://config:8888
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

  composite:
    build:
      context: microservices/composite
      dockerfile: Dockerfile
    image: msa/composite:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - CONFIG_SERVER_URI=http://config:8888
    depends_on:
      rabbitmq:
        condition: service_healthy
      authorization:
        condition: service_healthy
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

  eureka:
    build:
      context: cloud/eureka
      dockerfile: Dockerfile
    image: msa/eureka:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - CONFIG_SERVER_URI=http://config:8888
    depends_on:
      config:
        condition: service_healthy
    networks:
      - microservices-network

  gateway:
    build:
      context: cloud/gateway
      dockerfile: Dockerfile
    image: msa/gateway:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - CONFIG_SERVER_URI=http://config:8888
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_healthy
      authorization:
        condition: service_healthy
    networks:
      - microservices-network
    ports:
      - "8443:8443"

  authorization:
    build:
      context: cloud/authorization
      dockerfile: Dockerfile
    image: msa/authorization:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
      - CONFIG_SERVER_URI=http://config:8888
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://localhost:9999/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 60
    depends_on:
      config:
        condition: service_healthy
      eureka:
        condition: service_healthy
    networks:
      - microservices-network

  config:
    build:
      context: cloud/config
      dockerfile: Dockerfile
    image: msa/config:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 5s
      timeout: 2s
      retries: 60

# 네트워크 설정
networks:
  microservices-network:

# 볼륨 설정
volumes:
  mongodb_data:
    driver: local
  mysql_data:
    driver: local